name: Monorepo CI (Frontend & Backend)

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/**'

env:
  IMAGE_REPO: devopswithjunaid/junaid

jobs:
  changes:
    name: Detect changed parts
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend:  ${{ steps.filter.outputs.backend }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Filter paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

  frontend:
    name: Frontend CI → Docker Build & Push
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install deps (clean)
        working-directory: frontend
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Run tests (if present)
        working-directory: frontend
        run: |
          if npm run | grep -q "^  test"; then npm test --if-present; else echo "No test script found, skipping."; fi

      - name: Build app
        working-directory: frontend
        run: |
          if npm run | grep -q "^  build"; then npm run build; else echo "No build script found!"; fi

      - name: Compute tags
        id: meta
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          BRANCH="${GITHUB_REF_NAME}"
          echo "short_sha=$SHORT_SHA" >> "$GITHUB_OUTPUT"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          # tags: frontend-latest and frontend-<shortsha>
          echo "tags=frontend-latest,frontend-${SHORT_SHA}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (push only on branch push)
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build (PR) — no push
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: ${{ env.IMAGE_REPO }}:${{ steps.meta.outputs.tags }}
          build-args: |
            NODE_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push (main push)
        if: github.event_name == 'push'
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:frontend-latest
            ${{ env.IMAGE_REPO }}:frontend-${{ steps.meta.outputs.short_sha }}
          build-args: |
            NODE_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max

  backend:
    name: Backend CI → Docker Build & Push
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        working-directory: backend
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install pytest only if tests folder exists & pytest not present
          if [ -d tests ]; then python -c "import pytest" 2>/dev/null || pip install pytest; fi

      - name: Run tests (if present)
        working-directory: backend
        run: |
          if [ -d tests ]; then pytest -q; else echo "No tests directory found, skipping."; fi

      - name: Compute tags
        id: meta
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          BRANCH="${GITHUB_REF_NAME}"
          echo "short_sha=$SHORT_SHA" >> "$GITHUB_OUTPUT"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          # tags: backend-latest and backend-<shortsha>
          echo "tags=backend-latest,backend-${SHORT_SHA}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (push only on branch push)
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build (PR) — no push
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: ${{ env.IMAGE_REPO }}:${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push (main push)
        if: github.event_name == 'push'
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:backend-latest
            ${{ env.IMAGE_REPO }}:backend-${{ steps.meta.outputs.short_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
