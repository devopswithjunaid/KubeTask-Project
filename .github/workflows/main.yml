name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    # Code checkout
    - name: Check out code
      uses: actions/checkout@v3
    
    # Debug: Check project structure
    - name: List repository contents
      run: |
        echo "=== Root directory contents ==="
        ls -la
        echo ""
        echo "=== Looking for pom.xml files ==="
        find . -name "pom.xml" -type f
        echo ""
        echo "=== Looking for package.json files ==="
        find . -name "package.json" -type f
        echo ""
        echo "=== Directory tree (first 3 levels) ==="
        find . -maxdepth 3 -type d | sort
    
    # ---- Frontend ---- (Only if frontend directory exists)
    - name: Check if frontend directory exists
      id: check_frontend
      run: |
        if [ -d "./frontend" ]; then
          echo "frontend_exists=true" >> $GITHUB_OUTPUT
        else
          echo "frontend_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up Node.js
      if: steps.check_frontend.outputs.frontend_exists == 'true'
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      if: steps.check_frontend.outputs.frontend_exists == 'true'
      run: npm ci
      working-directory: ./frontend
    
    - name: Run frontend lint
      if: steps.check_frontend.outputs.frontend_exists == 'true'
      run: npm run lint || echo "Skipping frontend lint (no lint script found)"
      working-directory: ./frontend
    
    - name: Run frontend tests
      if: steps.check_frontend.outputs.frontend_exists == 'true'
      run: npm test || echo "Skipping frontend tests (no test script found)"
      working-directory: ./frontend
    
    - name: Build frontend
      if: steps.check_frontend.outputs.frontend_exists == 'true'
      run: npm run build || echo "Skipping frontend build (no build script found)"
      working-directory: ./frontend
    
    # ---- Backend ---- (Only if we find pom.xml)
    - name: Check for pom.xml location
      id: check_backend
      run: |
        if [ -f "./pom.xml" ]; then
          echo "pom_location=." >> $GITHUB_OUTPUT
          echo "backend_exists=true" >> $GITHUB_OUTPUT
        elif [ -f "./backend/pom.xml" ]; then
          echo "pom_location=./backend" >> $GITHUB_OUTPUT
          echo "backend_exists=true" >> $GITHUB_OUTPUT
        else
          echo "backend_exists=false" >> $GITHUB_OUTPUT
          echo "No pom.xml found in root or backend directory"
        fi
    
    - name: Set up Java
      if: steps.check_backend.outputs.backend_exists == 'true'
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Install backend dependencies
      if: steps.check_backend.outputs.backend_exists == 'true'
      run: mvn clean compile
      working-directory: ${{ steps.check_backend.outputs.pom_location }}
    
    - name: Run backend tests
      if: steps.check_backend.outputs.backend_exists == 'true'
      run: mvn test
      working-directory: ${{ steps.check_backend.outputs.pom_location }}
    
    - name: Package backend
      if: steps.check_backend.outputs.backend_exists == 'true'
      run: mvn package -DskipTests
      working-directory: ${{ steps.check_backend.outputs.pom_location }}
    
    # ---- Generate Tag Name ----
    - name: Generate tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
          # For main branch pushes, use version + commit SHA
          TAG="v1.0.${GITHUB_RUN_NUMBER}-${GITHUB_SHA::8}"
        elif [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          # For develop branch pushes, use dev tag
          TAG="dev-${GITHUB_SHA::8}"
        elif [ "${{ github.event_name }}" == "pull_request" ]; then
          # For PR, use pr tag
          TAG="pr-${{ github.event.number }}-${GITHUB_SHA::8}"
        else
          # Fallback tag
          TAG="test-${GITHUB_SHA::8}"
        fi
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Generated tag: $TAG"
    
    # ---- Docker Build & Push ---- (Only if Dockerfile exists)
    - name: Check if Dockerfile exists
      id: check_dockerfile
      run: |
        if [ -f "./Dockerfile" ]; then
          echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          echo "Dockerfile found at root"
        elif [ -f "./docker/Dockerfile" ]; then
          echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          echo "dockerfile_path=./docker" >> $GITHUB_OUTPUT
          echo "Dockerfile found in docker directory"
        else
          echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          echo "No Dockerfile found"
        fi
    
    - name: Set up Docker Buildx
      if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
      uses: docker/login-action@v2
      with:
        username: devopswithjunaid
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Build and push Docker image
      if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
      uses: docker/build-push-action@v4
      with:
        context: ${{ steps.check_dockerfile.outputs.dockerfile_path || '.' }}
        push: true
        tags: |
          devopswithjunaid/junaid:${{ steps.tag.outputs.tag }}
          devopswithjunaid/junaid:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Image digest
      if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
      run: echo "Image pushed successfully with tag: devopswithjunaid/junaid:${{ steps.tag.outputs.tag }}"

  # ---- Security Scanning ---- (Optional)
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'devopswithjunaid/junaid:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
