name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_REPO: devopswithjunaid/junaid

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          # Check if frontend directory exists and has changes
          if [ -d "frontend" ]; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if backend directory exists and has changes  
          if [ -d "backend" ] || [ -f "pom.xml" ] || [ -f "requirements.txt" ] || [ -f "package.json" ]; then
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "backend=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if Dockerfile exists
          if [ -f "Dockerfile" ] || [ -f "frontend/Dockerfile" ] || [ -f "backend/Dockerfile" ]; then
            echo "docker=true" >> $GITHUB_OUTPUT
          else
            echo "docker=false" >> $GITHUB_OUTPUT
          fi

  build-frontend:
    name: Build Frontend
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            package-lock.json

      - name: Install dependencies
        run: |
          if [ -d "frontend" ]; then
            cd frontend
            if [ -f "package-lock.json" ]; then
              npm ci
            else
              npm install
            fi
          elif [ -f "package.json" ]; then
            if [ -f "package-lock.json" ]; then
              npm ci
            else
              npm install
            fi
          fi

      - name: Run linting
        continue-on-error: true
        run: |
          if [ -d "frontend" ]; then
            cd frontend
            npm run lint || echo "No lint script or linting failed"
          elif [ -f "package.json" ]; then
            npm run lint || echo "No lint script or linting failed"
          fi

      - name: Run tests
        continue-on-error: true
        run: |
          if [ -d "frontend" ]; then
            cd frontend
            npm test -- --coverage --watchAll=false || echo "No tests or tests failed"
          elif [ -f "package.json" ]; then
            npm test -- --coverage --watchAll=false || echo "No tests or tests failed"  
          fi

      - name: Build application
        run: |
          if [ -d "frontend" ]; then
            cd frontend
            npm run build || echo "No build script found"
          elif [ -f "package.json" ]; then
            npm run build || echo "No build script found"
          fi

  build-backend:
    name: Build Backend
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Java/Maven backend
      - name: Setup Java
        if: hashFiles('**/pom.xml') != ''
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Build with Maven
        if: hashFiles('**/pom.xml') != ''
        run: |
          if [ -f "pom.xml" ]; then
            mvn clean compile test package -DskipTests=false
          elif [ -f "backend/pom.xml" ]; then
            cd backend
            mvn clean compile test package -DskipTests=false
          fi

      # Python backend
      - name: Setup Python
        if: hashFiles('**/requirements.txt') != '' || hashFiles('**/pyproject.toml') != ''
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        if: hashFiles('**/requirements.txt') != '' || hashFiles('**/pyproject.toml') != ''
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          elif [ -f "backend/requirements.txt" ]; then
            pip install -r backend/requirements.txt
          fi
          pip install pytest pytest-cov || true

      - name: Run Python tests
        if: hashFiles('**/requirements.txt') != '' || hashFiles('**/pyproject.toml') != ''
        continue-on-error: true
        run: |
          if [ -d "tests" ]; then
            pytest tests/ --cov --cov-report=xml || echo "Tests failed"
          elif [ -d "backend/tests" ]; then
            cd backend && pytest tests/ --cov --cov-report=xml || echo "Tests failed"
          else
            echo "No tests directory found"
          fi

  docker-build-push:
    name: Docker Build & Push
    needs: [detect-changes, build-frontend, build-backend]
    if: |
      always() && 
      needs.detect-changes.outputs.docker == 'true' &&
      (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped') &&
      (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate tags
        id: meta
        run: |
          SHORT_SHA=${GITHUB_SHA::8}
          BRANCH=${GITHUB_REF_NAME}
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          
          if [ "${{ github.event_name }}" == "push" ] && [ "$BRANCH" == "main" ]; then
            MAIN_TAG="v1.0.${GITHUB_RUN_NUMBER}-${SHORT_SHA}"
          elif [ "${{ github.event_name }}" == "push" ] && [ "$BRANCH" == "develop" ]; then
            MAIN_TAG="dev-${SHORT_SHA}"
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            MAIN_TAG="pr-${{ github.event.number }}-${SHORT_SHA}"
          else
            MAIN_TAG="test-${SHORT_SHA}"
          fi
          
          echo "main_tag=${MAIN_TAG}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          
          echo "Generated tag: ${MAIN_TAG}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: devopswithjunaid
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Build Frontend Docker Image
      - name: Build Frontend Docker Image
        if: hashFiles('frontend/Dockerfile') != ''
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: |
            ${{ env.IMAGE_REPO }}:frontend-${{ steps.meta.outputs.main_tag }}
            ${{ env.IMAGE_REPO }}:frontend-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Build Backend Docker Image  
      - name: Build Backend Docker Image
        if: hashFiles('backend/Dockerfile') != ''
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: |
            ${{ env.IMAGE_REPO }}:backend-${{ steps.meta.outputs.main_tag }}
            ${{ env.IMAGE_REPO }}:backend-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Build Root Dockerfile
      - name: Build Root Docker Image
        if: hashFiles('Dockerfile') != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: |
            ${{ env.IMAGE_REPO }}:${{ steps.meta.outputs.main_tag }}
            ${{ env.IMAGE_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Image Summary
        if: github.event_name == 'push'
        run: |
          echo "## Docker Images Built & Pushed ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ env.IMAGE_REPO }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Main Tag:** \`${{ steps.meta.outputs.main_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Short SHA:** \`${{ steps.meta.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ steps.meta.outputs.branch }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Tags:" >> $GITHUB_STEP_SUMMARY
          if [ -f "frontend/Dockerfile" ]; then
            echo "- \`devopswithjunaid/junaid:frontend-${{ steps.meta.outputs.main_tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`devopswithjunaid/junaid:frontend-latest\`" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "backend/Dockerfile" ]; then
            echo "- \`devopswithjunaid/junaid:backend-${{ steps.meta.outputs.main_tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`devopswithjunaid/junaid:backend-latest\`" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "Dockerfile" ]; then
            echo "- \`devopswithjunaid/junaid:${{ steps.meta.outputs.main_tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`devopswithjunaid/junaid:latest\`" >> $GITHUB_STEP_SUMMARY
          fi
